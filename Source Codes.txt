InventoryManagerTest:

@isTest
public class InventoryManagerTest {

    @testSetup
    static void setupData() {
        // Insert product with initial stock
        Re_Plastic_Innovations_Recycled_Product__c product = new Re_Plastic_Innovations_Recycled_Product__c(
            Stock_Level__c = 50,
            Threshold__c = 10
        );
        insert product;
    }

    @isTest
    static void testOrderTriggerAndRestockCreation() {
        // Fetch product
        Re_Plastic_Innovations_Recycled_Product__c product = [
            SELECT Id FROM Re_Plastic_Innovations_Recycled_Product__c LIMIT 1
        ];

        // Insert orders (1 valid, 1 triggers restock)
        List<Re_Plastic_Innovations_Order__c> orders = new List<Re_Plastic_Innovations_Order__c>{
            new Re_Plastic_Innovations_Order__c(Recycled_Product__c = product.Id, Quantity__c = 20),
            new Re_Plastic_Innovations_Order__c(Recycled_Product__c = product.Id, Quantity__c = 40)
        };

        Test.startTest();
        insert orders; // Triggers UpdateStockAfterOrder
        Test.stopTest();

        // Verify stock updated
        Re_Plastic_Innovations_Recycled_Product__c updatedProduct = [
            SELECT Stock_Level__c FROM Re_Plastic_Innovations_Recycled_Product__c WHERE Id = :product.Id
        ];
        System.assertEquals(50 - 20, updatedProduct.Stock_Level__c, 'Stock should be reduced by 20');

        // Verify restock request created
        List<Re_Plastic_Innovations_Restock_Request__c> restocks = [
            SELECT Id FROM Re_Plastic_Innovations_Restock_Request__c WHERE Product__c = :product.Id AND Status__c = 'Pending'
        ];
        System.assertEquals(1, restocks.size(), 'One restock request should be created');
    }

    @isTest
    static void testUpdateStockAfterRestockApprovalTrigger() {
        // Insert product with low stock
        Re_Plastic_Innovations_Recycled_Product__c product = new Re_Plastic_Innovations_Recycled_Product__c(
            Stock_Level__c = 10,
            Threshold__c = 100
        );
        insert product;

        // Insert order with high quantity (forces restock)
        Re_Plastic_Innovations_Order__c order = new Re_Plastic_Innovations_Order__c(
            Recycled_Product__c = product.Id,
            Quantity__c = 150
        );
        insert order;

        // Approve the restock request
        List<Re_Plastic_Innovations_Restock_Request__c> requests = [
            SELECT Id, Product__c, Requested_Quantity__c, Status__c
            FROM Re_Plastic_Innovations_Restock_Request__c
            WHERE Product__c = :product.Id
        ];

        for (Re_Plastic_Innovations_Restock_Request__c req : requests) {
            req.Status__c = 'Approved';
        }

        Test.startTest();
        update requests; // Triggers UpdateStockAfterRestockApproval + sends email
        Test.stopTest();

        // Verify stock increased
        Re_Plastic_Innovations_Recycled_Product__c updatedProduct = [
            SELECT Stock_Level__c FROM Re_Plastic_Innovations_Recycled_Product__c WHERE Id = :product.Id
        ];
        System.assert(updatedProduct.Stock_Level__c > 10, 'Stock should increase after approval');
    }
}



EmailNotifcationHelper:

public class EmailNotificationHelper {
    public static void sendRestockNotification(List<Re_Plastic_Innovations_Restock_Request__c> restockRequests) {
        List<Messaging.SingleEmailMessage> emails = new List<Messaging.SingleEmailMessage>();

        for (Re_Plastic_Innovations_Restock_Request__c restock : restockRequests) {
            Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
            email.setSubject('Restock Request Approved');
            email.setToAddresses(new List<String>{'mabdulrahaman066@gmail.com'});
            email.setPlainTextBody('The restock request for product ' + restock.Product__c + ' has been approved. Please proceed with stock update.');
            emails.add(email);
        }

        if (!emails.isEmpty()) Messaging.sendEmail(emails);
    }
}



UpdateStockAfterRestockApproval:

trigger UpdateStockAfterRestockApproval on Re_Plastic_Innovations_Restock_Request__c (after update) {
List<Re_Plastic_Innovations_Restock_Request__c> approvedRestocks = new List<Re_Plastic_Innovations_Restock_Request__c>();
for (Re_Plastic_Innovations_Restock_Request__c restock : Trigger.new) {
if (restock.Status__c == 'Approved' &&
Trigger.oldMap.get(restock.Id).Status__c != 'Approved') {
     approvedRestocks.add(restock);
 }
}
if (!approvedRestocks.isEmpty()) {
 InventoryManager.processRestockApproval(approvedRestocks);
}
}


UpdateStockAfterOrder:

trigger UpdateStockAfterOrder on Re_Plastic_Innovations_Order__c (after insert) {

    if (Trigger.isAfter && Trigger.isInsert) {

        InventoryManager.processOrderStock(Trigger.new);

    }
}


InventoryManager

public class InventoryManager {

    // Reduce stock and create restock requests
    public static void processOrderStock(List<Re_Plastic_Innovations_Order__c> orderList) {
        Set<Id> productIds = new Set<Id>();
        for (Re_Plastic_Innovations_Order__c order : orderList) {
            productIds.add(order.Recycled_Product__c);
        }

        Map<Id, Re_Plastic_Innovations_Recycled_Product__c> productMap = new Map<Id, Re_Plastic_Innovations_Recycled_Product__c>(
            [SELECT Id, Stock_Level__c, Threshold__c FROM Re_Plastic_Innovations_Recycled_Product__c WHERE Id IN :productIds]
        );

        List<Re_Plastic_Innovations_Recycled_Product__c> productsToUpdate = new List<Re_Plastic_Innovations_Recycled_Product__c>();
        List<Re_Plastic_Innovations_Restock_Request__c> restockRequests = new List<Re_Plastic_Innovations_Restock_Request__c>();

        for (Re_Plastic_Innovations_Order__c order : orderList) {
            Re_Plastic_Innovations_Recycled_Product__c product = productMap.get(order.Recycled_Product__c);
            if (product != null) {
                if (product.Stock_Level__c >= order.Quantity__c) {
                    product.Stock_Level__c -= order.Quantity__c;
                    productsToUpdate.add(product);
                } else {
                    restockRequests.add(new Re_Plastic_Innovations_Restock_Request__c(
                        Product__c = product.Id,
                        Requested_Quantity__c = order.Quantity__c - product.Stock_Level__c,
                        Status__c = 'Pending'
                    ));
                    product.Stock_Level__c = 0; // Reduce to 0
                    productsToUpdate.add(product);
                }
            }
        }

        if (!productsToUpdate.isEmpty()) update productsToUpdate;
        if (!restockRequests.isEmpty()) insert restockRequests;
    }

    // Add stock if restock is approved
    public static void processRestockApproval(List<Re_Plastic_Innovations_Restock_Request__c> restockList) {
        Set<Id> productIds = new Set<Id>();
        for (Re_Plastic_Innovations_Restock_Request__c restock : restockList) {
            if (restock.Status__c == 'Approved') {
                productIds.add(restock.Product__c);
            }
        }

        Map<Id, Re_Plastic_Innovations_Recycled_Product__c> productMap = new Map<Id, Re_Plastic_Innovations_Recycled_Product__c>(
            [SELECT Id, Stock_Level__c FROM Re_Plastic_Innovations_Recycled_Product__c WHERE Id IN :productIds]
        );

        List<Re_Plastic_Innovations_Recycled_Product__c> productsToUpdate = new List<Re_Plastic_Innovations_Recycled_Product__c>();

        for (Re_Plastic_Innovations_Restock_Request__c restock : restockList) {
            if (productMap.containsKey(restock.Product__c)) {
                Re_Plastic_Innovations_Recycled_Product__c product = productMap.get(restock.Product__c);
                product.Stock_Level__c += restock.Requested_Quantity__c;
                productsToUpdate.add(product);
            }
        }

        if (!productsToUpdate.isEmpty()) update productsToUpdate;
    }
}